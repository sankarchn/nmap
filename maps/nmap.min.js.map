{"version":3,"sources":["/src/js/js/globals.js","/src/js/js/model/spots.js","/src/js/js/view_model/list_item.js","/src/js/js/app.js","/src/js/js/model/sample.js","/src/js/js/view_model/list_view.js","/src/js/js/map/gmap.js","/src/js/js/model/fsquare.js"],"names":["Spot","data","this","id","name","position","Position","lat","lng","category","address","parseFloat","ListItem","isVisible","ko","observable","clickStatus","bakeMyMap","fsquare","fetchSpots","myCity","location","status","err","FETCH_SUCCESS","Gmap","init","mapDiv","MAP_ZOOM_LEVEL","vModel","_","each","spotsDb","getAllSpots","spot","addSpot","addMarker","showAllMarkers","notifySpotEvent","FETCH_FAIL","launch","geoCode","results","geometry","drawMyMap","launchError","ListView","getVmodel","getName","gm_authFailure","getDeviceType","wd","window","screen","width","MOBILE_MAXWIDTH","PHONE_FORM","TAB_MAXWIDTH","TAB_FORM","DESKTOP_FORM","ITEM_CLICKED","ITEM_UNCLICKED","ITEM_HIDDEN","ITEM_REVEALED","MARKER_CLICKED","MARKER_UNCLICKED","MARKER_HIDDEN","MARKER_REVEALED","RESTORE_ALL","prototype","getPosition","getID","getCategory","getAddress","getLat","getLng","spots","getSpot","sample","places","populate","j","length","isClicked","setClicked","setVisibility","city","provider","listVmodel","ViewModel","applyBindings","curClickSpot","SHOW_IN_LIST","HIDE_IN_LIST","HIGHLIGHT_ENTRY","UNHIGHLIGHT_ENTRY","loadSuccessText","template","loadFailText","filterResults","findspItem","spItem","index","len","self","spItemList","setDisplayParams","show","highlight","cityName","pgHeader","providerName","providerFail","failReason","observableArray","inputStr","patString","showFiltResults","matches","drawingMode","listCounter","filtResult","computed","count","patstr","listWidth","listShow","closeList","openList","dType","loadFail","reason","loadSuccess","mycount","mycity","myprovider","inpChange","filterList","sortedIndex","splice","listClickfn","event","prevSpot","notify","what","updateFilterResult","str","srchRegex","searchStr","RegExp","search","anchor","center","zlevel","vm","map","google","maps","Map","zoom","mapTypeControl","scaleControl","disableDoubleClickZoom","draggable","styles","mapStyle","markers","bounds","LatLngBounds","infoWindow","InfoWindow","addListener","closeInfoWindow","drawingManager","drawing","DrawingManager","drawingControl","drawingControlOptions","ControlPosition","TOP_RIGHT","drawingModes","setMap","processPolygon","restoreMap","streetViewService","StreetViewService","viewModel","addDomListener","getCenter","trigger","setCenter","marker","Marker","animation","Animation","DROP","title","setIcon","getDefIcon","extend","getHighlightIcon","showInfoWindow","i","fitBounds","setTimeout","mkr","where","showMarker","has","hideMarker","setContent","getContent","open","close","radius","ctemplate","contentStr","toString","panoId","getPanoramaByLocation","StreetViewStatus","OK","nearStreetViewLocation","latLng","heading","spherical","computeHeading","panoramaOptions","pov","pitch","StreetViewPanorama","document","getElementById","image","url","size","Size","origin","Point","scaledSize","polygon","setDrawingMode","overlay","setEditable","markInPolygon","getPath","area","computeArea","poly","containsLocation","toFixed","callback","geocoder","Geocoder","geocode","featureType","elementType","stylers","visibility","color","hue","lightness","$","param","ll","categoryId","outdoor","food","shopping","artEntertainment","travel","limit","intent","client_id","client_secret","v","getJSON","done","textStatus","jqXHR","venues","response","venue","categories","formattedAddress","fail","errorThrown","after","ready"],"mappings":"AAGA,YCEA,SAAAA,MAAAC,GACAC,KAAAC,GAAAF,EAAAE,GACAD,KAAAE,KAAAH,EAAAG,KACAF,KAAAG,SAAA,GAAAC,UAAAL,EAAAM,IAAAN,EAAAO,KACAN,KAAAO,SAAAR,EAAAQ,SACAP,KAAAQ,QAAAT,EAAAS,QAuBA,QAAAJ,UAAAC,EAAAC,GACAN,KAAAK,IAAAI,WAAAJ,GACAL,KAAAM,IAAAG,WAAAH,GC7BA,QAAAI,UAAAT,EAAAC,GACAF,KAAAC,GAAAA,EACAD,KAAAE,KAAAA,EACAF,KAAAW,UAAAC,GAAAC,YAAA,GACAb,KAAAc,YAAAF,GAAAC,YAAA,GCDA,QAAAE,aACAC,QAAAC,WAAAC,OAAAC,SAAA,SAAAC,EAAAC,GACAD,IAAAE,eACAC,KAAAC,KAAAC,OAAAP,OAAAC,SAAAO,eAAAC,QAEAC,EAAAC,KAAAC,QAAAC,cAAA,SAAAC,EAAA/B,GACA0B,OAAAM,QAAAhC,GACAsB,KAAAW,UAAAjC,KAGAsB,KAAAY,iBAEAR,OAAAS,gBAAAd,cAAAD,IAGAM,OAAAS,gBAAAC,WAAAhB,KAKA,QAAAiB,UACAf,KAAAgB,QAAArB,OAAAhB,KAAA,SAAAsC,EAAApB,GACA,OAAAA,GACAF,OAAAC,UACAd,IAAAmC,EAAA,GAAAC,SAAAtB,SAAAd,MACAC,IAAAkC,EAAA,GAAAC,SAAAtB,SAAAb,OAEAoC,aAGAf,OAAAS,gBAAAC,WAAA,wDAAAjB,KAOA,QAAAuB,eAGAhB,SACAA,OAAAiB,SAAAC,UAAA3B,OAAAhB,KAAAc,QAAA8B,YACAnB,OAAAS,gBAAAC,WAAA,+BAIA,QAAAU,kBAGApB,SACAA,OAAAiB,SAAAC,UAAA3B,OAAAhB,KAAAc,QAAA8B,YACAnB,OAAAS,gBAAAC,WAAA,4CAIA,QAAAW,iBACA,GAAAC,GAAAC,OAAAC,OAAAC,KACA,OAAAH,IAAAI,gBACAC,WACAL,GAAAM,aACAC,SAGAC,aHnEA,GAAAvC,SACAhB,KAAA,UACAiB,aAGAQ,OACAF,OAGAiC,aAAA,IACAC,eAAA,IACAC,YAAA,IACAC,cAAA,IACAC,eAAA,IACAC,iBAAA,IACAC,cAAA,IACAC,gBAAA,IACAC,YAAA,IACA5C,cAAA,EACAe,WAAA,EAEAX,eAAA,GAEA2B,gBAAA,IACAE,aAAA,IACAD,WAAA,GACAE,SAAA,GACAC,aAAA,ECnBA3D,MAAAqE,UAAArB,QAAA,WACA,MAAA9C,MAAAE,MAGAJ,KAAAqE,UAAAC,YAAA,WACA,MAAApE,MAAAG,UAGAL,KAAAqE,UAAAE,MAAA,WACA,MAAArE,MAAAC,IAGAH,KAAAqE,UAAAG,YAAA,WACA,MAAAtE,MAAAO,UAGAT,KAAAqE,UAAAI,WAAA,WACA,MAAAvE,MAAAQ,SAQAJ,SAAA+D,UAAAK,OAAA,WACA,MAAAxE,MAAAK,KAGAD,SAAA+D,UAAAM,OAAA,WACA,MAAAzE,MAAAM,IAGA,IAAAwB,UACA4C,SACAzC,QAAA,SAAAhC,EAAA+B,GACAhC,KAAA0E,MAAAzE,GAAA+B,GAGA2C,QAAA,SAAA1E,GACA,MAAAD,MAAA0E,MAAAzE,IAGA8B,YAAA,WACA,MAAA/B,MAAA0E,QGpDAE,OAAA,WAEA,GAAAC,KAEA5E,GAAA,EACAC,KAAA,eACAG,IAAA,qBACAC,IAAA,qBAIAL,GAAA,EACAC,KAAA,wBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,mBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,sBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,kBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,6CACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,iCACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,wBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,kBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,EACAC,KAAA,iBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,GACAC,KAAA,oBACAG,IAAA,oBACAC,IAAA,sBAIAL,GAAA,GACAC,KAAA,0BACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,GACAC,KAAA,oBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,GACAC,KAAA,gBACAG,IAAA,qBACAC,IAAA,sBAIAL,GAAA,GACAC,KAAA,uBACAG,IAAA,aACAC,IAAA,eAIAL,GAAA,GACAC,KAAA,oBACAG,IAAA,WACAC,IAAA,YAIAwE,EAAA,WACA,IAAA,GAAAC,GAAA,EAAAA,EAAAF,EAAAG,OAAAD,IACAjD,QAAAG,QAAA8C,EAAA,GAAAjF,MAAA+E,EAAAE,KAKA,QACA9D,WAAA6D,KFpHApE,UAAAyD,UAAArB,QAAA,WACA,MAAA9C,MAAAE,MAGAQ,SAAAyD,UAAAE,MAAA,WACA,MAAArE,MAAAC,IAGAS,SAAAyD,UAAAc,UAAA,WACA,MAAAjF,MAAAc,eAGAJ,SAAAyD,UAAAe,WAAA,SAAA9D,GACApB,KAAAc,YAAAM,IAGAV,SAAAyD,UAAAgB,cAAA,SAAA/D,GACApB,KAAAW,UAAAS,GG1BA,IAAAwB,UAAA,WA2RA,QAAAC,GAAAuC,EAAAC,GACA,MAAA,OAAAC,EACAA,GAEAA,EAAA,GAAAC,GAAAH,EAAAC,GACAzE,GAAA4E,cAAAF,GAEAA,GA/RA,GAAAG,GAAA,KACAH,EAAA,KACAI,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EAEAC,EAAAlE,EAAAmE,SAAA,yFACAC,EAAApE,EAAAmE,SAAA,iGACAE,EAAArE,EAAAmE,SAAA,6DACAR,EAAA,SAAAH,EAAAC,GAwIA,QAAAa,GAAAjG,GACA,GACAkG,GACAC,EAFAC,EAAAC,EAAAC,aAAAvB,MAIA,KAAAoB,EAAA,EAAAA,EAAAC,EAAAD,IAEA,GADAD,EAAAG,EAAAC,aAAAH,GACAD,EAAA9B,SAAApE,EACA,MAAAkG,EAIA,OAAA,MAGA,QAAAK,GAAAL,EAAAM,EAAAC,GACAP,EAAAhB,cAAAsB,GACAN,EAAAjB,WAAAwB,GAxJA,GAAAJ,GAAAtG,IAEAsG,GAAAK,SAAA/F,GAAAC,WAAAuE,GACAkB,EAAAM,SAAA,WAAAxB,EAKAkB,EAAAO,aAAAxB,EACAiB,EAAAQ,aAAAlG,GAAAC,YAAA,GACAyF,EAAAS,WAAA,GAIAT,EAAAC,WAAA3F,GAAAoG,kBAGAV,EAAAW,SAAArG,GAAAC,WAAA,IAKAyF,EAAAY,UAAA,GAIAZ,EAAAa,gBAAAvG,GAAAC,YAAA,GACAyF,EAAAc,QAAAxG,GAAAC,WAAA,GACAyF,EAAAe,YAAAzG,GAAAC,YAAA,GAGAyF,EAAAgB,YAAA1G,GAAAC,WAAA,GAGAyF,EAAAiB,WAAA3G,GAAA4G,SAAA,WACA,MAAAlB,GAAAa,kBACAlB,GACAwB,MAAAnB,EAAAc,UACAM,OAAApB,EAAAY,YAGA,KAIAZ,EAAAqB,UAAA/G,GAAAC,WAAA,KACAyF,EAAAsB,SAAAhH,GAAAC,WAAA,SAEAyF,EAAAuB,UAAA,WACAvB,EAAAsB,SAAA,SAGAtB,EAAAwB,SAAA,WACAxB,EAAAsB,SAAA,UAIAtB,EAAAyB,MAAA/E,gBACAsD,EAAAyB,QAAAvE,UAAA8C,EAAAyB,QAAAzE,YACAgD,EAAAuB,YAIAvB,EAAA0B,SAAApH,GAAA4G,SAAA,WACA,GAAAlB,EAAAQ,eAOA,MAJAR,GAAAyB,QAAAvE,UACA8C,EAAAyB,QAAAzE,YACAgD,EAAAwB,WAEA9B,GACAX,SAAAiB,EAAAO,aACAoB,OAAA3B,EAAAS,eAMAT,EAAA4B,YAAAtH,GAAA4G,SAAA,WACA,MAAA1B,IACAqC,QAAA7B,EAAAgB,cACAc,OAAA9B,EAAAK,WACA0B,WAAA/B,EAAAO,iBAIAP,EAAAgC,UAAA,WACAhC,EAAAa,iBAAA,GACAb,EAAAiC,cAGAjC,EAAArE,QAAA,SAAAhC,GACA,GAAAkG,GACAC,CAEAD,GAAA,GAAAzF,UAAAT,EAAA6B,QAAA6C,QAAA1E,GAAA6C,WAEAsD,EAAAxE,EAAA4G,YAAAlC,EAAAC,aAAAJ,EAAA,QACAG,EAAAC,WAAAkC,OAAArC,EAAA,EAAAD,GACAG,EAAAgB,YAAAhB,EAAAgB,cAAA,IAKAhB,EAAAoC,YAAA,SAAAvC,EAAAwC,GACA,GAAAC,GAAAnD,CAEAU,GAAAlB,aAqBAuB,EAAAL,EAAAT,EAAAG,GACAtE,KAAAsH,OAAAlF,eAAAwC,EAAA9B,SACAoB,EAAA,OApBA,MAAAmD,GACApC,EAAAoC,EAAAlD,EAAAG,GAIAW,EAAAL,EAAAT,EAAAE,GACArE,KAAAsH,OAAAnF,aAAAyC,EAAA9B,SACAoB,EAAAU,EAIAG,EAAAyB,OAAAzE,YACAgD,EAAAuB,cAmCAvB,EAAAuC,OAAA,SAAAC,EAAA/I,GACA,GAAAsG,GACAF,EACAC,EACAnG,EAAAF,CAEA,QAAA+I,GACA,IAAAhF,gBACAqC,EAAAD,EAAAjG,GACAwF,GAAAU,GAAA,MAAAV,GAEAe,EAAAf,EAAAC,EAAAG,GAEAW,EAAAL,EAAAT,EAAAE,GACAH,EAAAU,CACA,MAEA,KAAApC,kBACAoC,EAAAD,EAAAjG,GACAuG,EAAAL,EAAAT,EAAAG,GACAJ,EAAA,IACA,MAEA,KAAAzB,eACAmC,EAAAD,EAAAjG,GACAuG,EAAAL,EAAAR,EAAAE,EACA,MAEA,KAAA5B,iBACAkC,EAAAD,EAAAjG,GACAuG,EAAAL,EAAAT,EAAAG,EACA,MAEA,KAAA3B,aAEA,IADAmC,EAAAC,EAAAC,aAAAvB,OACAoB,EAAA,EAAAA,EAAAC,EAAAD,IACAD,EAAAG,EAAAC,aAAAH,GACAI,EAAAL,EAAAT,EAAAG,EAEAS,GAAAW,SAAA,IACAX,EAAAa,iBAAA,GACAb,EAAAe,aAAA,KAQAf,EAAAlE,gBAAA,SAAA0G,EAAA/I,GACA,OAAA+I,GACA,IAAAzG,YACAiE,EAAAS,WAAAhH,EACAuG,EAAAQ,cAAA,EACA,MACA,KAAAxF,eACAgF,EAAAQ,cAAA,KAOAR,EAAAyC,mBAAA,SAAA3B,EAAA4B,GAGA1C,EAAAyB,QAAAvE,UACA8C,EAAAyB,QAAAzE,YACAgD,EAAAwB,WAGAxB,EAAAc,QAAAA,GACAd,EAAAY,UAAA8B,EACA1C,EAAAW,SAAA,IACAX,EAAAa,iBAAA,GACAb,EAAAe,aAAA,IAIAf,EAAAiC,WAAA,WACA,GACAU,GADAC,EAAA5C,EAAAW,WAEAQ,EAAA,CAEAwB,GAAA,GAAAE,QAAAD,EAAA,KACAtH,EAAAC,KAAAyE,EAAAC,aAAA,SAAAJ,GACAA,EAAArD,UAAAsG,OAAAH,KAAA,GACAzC,EAAAL,EAAAR,EAAAE,GACAtE,KAAAsH,OAAAjF,YAAAuC,EAAA9B,WAGAmC,EAAAL,EAAAT,EAAAG,GACAtE,KAAAsH,OAAAhF,cAAAsC,EAAA9B,SACAoD,OAOA,GAAAyB,EAAAlE,OACAsB,EAAAa,iBAAA,IAGAb,EAAAc,QAAAK,GACAnB,EAAAY,UAAAZ,EAAAW,WACAX,EAAAa,iBAAA,KAeA,QACAtE,UAAAA,MCtSAtB,KAAA,WAgDA,QAAAC,GAAA6H,EAAAC,EAAAC,EAAAC,GAEAC,EAAA,GAAAC,QAAAC,KAAAC,IAAAP,GACAC,OAAAA,EACAO,KAAAN,EACAO,gBAAA,EACAC,cAAA,EACAC,wBAAA,EACAC,WAAA,EACAC,OAAAC,IAGAC,KAEAC,EAAA,GAAAX,QAAAC,KAAAW,aAEAC,EAAA,GAAAb,QAAAC,KAAAa,WAEAD,EAAAE,YAAA,aAAAC,GAEAC,EAAA,GAAAjB,QAAAC,KAAAiB,QAAAC,gBACAC,gBAAA,EACAC,uBACA5K,SAAAuJ,OAAAC,KAAAqB,gBAAAC,UACAC,cAAA,cAGAP,EAAAQ,OAAA1B,GAIAkB,EAAAF,YAAA,kBAAAW,GAIA3B,EAAAgB,YAAA,WAAAY,GAEAC,EAAA,GAAA5B,QAAAC,KAAA4B,kBAKAC,EAAAhC,EAGAE,OAAAC,KAAAhB,MAAA8C,eAAAvI,OAAA,SAAA,WACA,GAAAoG,GAAAe,EAAAqB,WACAhC,QAAAC,KAAAhB,MAAAgD,QAAAlC,EAAA,UACAA,EAAAmC,UAAAtC,KAIA,QAAApH,GAAAjC,GACA,GAAA4L,GACA7J,CAEAA,GAAAF,QAAA6C,QAAA1E,GACA4L,EAAA,GAAAnC,QAAAC,KAAAmC,QACA3L,SAAA6B,EAAAoC,cACA2H,UAAArC,OAAAC,KAAAqC,UAAAC,KACAhC,WAAA,EACAhK,GAAAA,EACAiM,MAAAlK,EAAAc,YAEA+I,EAAAM,QAAAC,KAGA/B,EAAAgC,OAAAR,EAAA1L,UAGAiK,EAAAnK,GAAA4L,EAIAA,EAAApB,YAAA,YAAA,WACAzK,KAAAmM,QAAAG,OAEAT,EAAApB,YAAA,WAAA,WAGAF,EAAAsB,QAAA7L,MACAA,KAAAmM,QAAAC,OAEAP,EAAApB,YAAA,QAAA,WAEA8B,EAAAvM,KAAAC,MAIA,QAAAkC,KACA,GAAAqK,GAAA,CAIA/C,GAAAgD,UAAApC,GACAZ,EAAAmC,UAAAvB,EAAAqB,aAEA9J,EAAAC,KAAAuI,EAAA,SAAAyB,GACA3I,OAAAwJ,WAAA,SAAAC,EAAAC,GACA,MAAA,YACAD,EAAAR,QAAAC,KACAO,EAAAxB,OAAAyB,KAEAf,EAAApC,GAAA,GAAA+C,OAIA,QAAAK,GAAA5M,GACA2B,EAAAkL,IAAA1C,EAAAnK,IACAmK,EAAAnK,GAAAkL,OAAA1B,GAGA,QAAAsD,GAAA9M,GACA2B,EAAAkL,IAAA1C,EAAAnK,IACAmK,EAAAnK,GAAAkL,OAAA,MAGA,QAAAoB,GAAAtM,GACA,GAAA4L,EAEAjK,GAAAkL,IAAA1C,EAAAnK,KAGA4L,EAAAzB,EAAAnK,GAGA,MAAAsK,EAAAsB,SACAtB,EAAAsB,OAAAM,QAAAC,KACAZ,EAAA3C,OAAA9E,iBAAAwG,EAAAsB,OAAA5L,KAGA4L,EAAAM,QAAAG,KACA/B,EAAAsB,OAAAA,EACAtB,EAAAyC,WAAAC,EAAAhN,IACAsK,EAAA2C,KAAAzD,EAAAoC,GAGAL,EAAA3C,OAAA/E,eAAAyG,EAAAsB,OAAA5L,KAGA,QAAAyK,KACAH,EAAAyC,WAAA,IACAzC,EAAA4C,QAKA,MAAA5C,EAAAsB,SACAtB,EAAAsB,OAAAM,QAAAC,KACAZ,EAAA3C,OAAA9E,iBAAAwG,EAAAsB,OAAA5L,IACAsK,EAAAsB,OAAA,MAIApC,EAAAmC,UAAAvB,EAAAqB,aAGA,QAAAuB,GAAAhN,GACA,GAAA+B,GAAAF,QAAA6C,QAAA1E,GACA4L,EAAAzB,EAAAnK,GACAmN,EAAA,IACAC,EAAAzL,EAAAmE,SAAA,oJAKAuH,EAAAD,GACAnB,MAAAlK,EAAAc,UACAvC,SAAAyB,EAAAsC,cACA9D,QAAAwB,EAAAuC,aAAAgJ,WACAC,OAAA,aAqCA,OA/BAlC,GAAAmC,sBAAA5B,EAAA1L,SAAAiN,EAAA,SAAArN,EAAAqB,GAKA,GAAAA,GAAAsI,OAAAC,KAAA+D,iBAAAC,GACA,CAAA,GAAAC,GAAA7N,EAAAoB,SAAA0M,OACAC,EAAApE,OAAAC,KAAAlH,SAAAsL,UAAAC,eACAJ,EAAA/B,EAAA1L,UAEA8N,GACA9N,SAAAyN,EACAM,KACAJ,QAAAA,EACAK,MAAA,GAGA,IAAAzE,QAAAC,KAAAyE,mBACAC,SAAAC,eAAA,QAAAL,OAEAX,GAAAD,GACAnB,MAAAlK,EAAAc,UACAvC,SAAAyB,EAAAsC,cACA9D,QAAAwB,EAAAuC,aAAAgJ,WACAC,OAAA,KAEAjD,EAAAyC,WAAAM,EACA,sEAIAA,EAGA,QAAAlB,KACA,GAAAmC,IACAC,IAAA,uFACAC,KAAA,GAAA/E,QAAAC,KAAA+E,KAAA,GAAA,IACAC,OAAA,GAAAjF,QAAAC,KAAAiF,MAAA,EAAA,GACAvF,OAAA,GAAAK,QAAAC,KAAAiF,MAAA,GAAA,IACAC,WAAA,GAAAnF,QAAAC,KAAA+E,KAAA,GAAA,IAGA,OAAAH,GAGA,QAAAjC,KACA,GAAAiC,IACAC,IAAA,0FACAC,KAAA,GAAA/E,QAAAC,KAAA+E,KAAA,GAAA,IACAC,OAAA,GAAAjF,QAAAC,KAAAiF,MAAA,EAAA,GACAvF,OAAA,GAAAK,QAAAC,KAAAiF,MAAA,GAAA,IACAC,WAAA,GAAAnF,QAAAC,KAAA+E,KAAA,GAAA,IAGA,OAAAH,GAKA,QAAA1F,GAAAC,EAAA7I,GACA,OAAA6I,GACA,IAAApF,cACA6I,EAAAtM,EACA,MACA,KAAA0D,gBACA+G,GACA,MACA,KAAA9G,aACAmJ,EAAA9M,EACA,MACA,KAAA4D,eACAgJ,EAAA5M,IAKA,QAAAoL,KACAyD,GACAA,EAAA3D,OAAA,MACAR,EAAAoE,eAAA,MACArE,IACAc,EAAA3C,OAAA3E,aACA/B,IAGA,QAAAiJ,GAAAzC,GAGAmG,GACAA,EAAA3D,OAAA,MAGAR,EAAAoE,eAAA,MAEAD,EAAAnG,EAAAqG,QACAF,EAAAG,aAAA,GAGAC,IAEAJ,EAAAK,UAAA1E,YAAA,SAAAyE,GACAJ,EAAAK,UAAA1E,YAAA,YAAAyE,GACAJ,EAAAK,UAAA1E,YAAA,YAAAyE,GAGA,QAAAA,KACA,GAAA9H,GAAA,EACAgI,EAAA1F,OAAAC,KAAAlH,SAAAsL,UAAAsB,YAAAP,EAAAK,UAEAvN,GAAAC,KAAAuI,EAAA,SAAAyB,GACAnC,OAAAC,KAAAlH,SAAA6M,KAAAC,iBAAA1D,EAAA1L,SAAA2O,IACAjD,EAAAV,OAAA1B,GACA+B,EAAA3C,OAAA5E,gBAAA4H,EAAA5L,IACAmH,MAGAyE,EAAAV,OAAA,MACAK,EAAA3C,OAAA7E,cAAA6H,EAAA5L,OAKAyK,IAGA0E,GAAAA,EAAA,KAAAI,QAAA,GACAhE,EAAAzC,mBAAA3B,EAAA,2BAAAgI,EAAA,UAGA,QAAA7M,GAAA6C,EAAAqK,GACA,GAAAC,GAAA,GAAAhG,QAAAC,KAAAgG,QAEAD,GAAAE,SAAApP,QAAA4E,GAAA,SAAA5C,EAAApB,GACAqO,EAAAjN,EAAApB,KAnWA,GAAAqI,GAEAY,EACAE,EACAI,EACAW,EAEAE,EANApB,KAKA0E,EAAA,KAOA3E,IAEA0F,YAAA,oBACAC,YAAA,gBACAC,UAAAC,WAAA,OAAAC,MAAA,cAGAJ,YAAA,MACAC,YAAA,gBACAC,UAAAC,WAAA,OAAAE,IAAA,YAAAD,MAAA,cAGAJ,YAAA,OACAC,YAAA,WACAC,UAAAI,UAAA,MAAAH,WAAA,iBAGAH,YAAA,OACAC,YAAA,SACAC,UAAAC,WAAA,UAGAH,YAAA,eACAC,YAAA,WACAC,UAAAC,WAAA,OAAAG,UAAA,QAGAN,YAAA,QACAC,YAAA,MACAC,UAAAE,MAAA,aA6TA,QACAzO,KAAAA,EACAU,UAAAA,EACAC,eAAAA,EACA0G,OAAAA,EACAtG,QAAAA,MC/WAvB,QAAA,WAaA,QAAAC,GAAAmH,EAAAqH,GACAjB,GAAA,IAAA4B,EAAAC,OACAC,GAAAlI,EAAA/H,IAAA,IAAA+H,EAAA9H,IACA8M,OAAA,IAEAmD,WAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EACAC,MAAA,GACAC,OAAA,SACAC,UAAAA,EACAC,cAAAA,EACAC,EAAA,aAGAb,EAAAc,QAAA1C,GACA2C,KAAA,SAAApR,EAAAqR,EAAAC,GACA,GAAAC,GAAAvR,EAAAwR,SAAAD,MAEA1P,GAAAC,KAAAyP,EAAA,SAAAE,GACA,GAAAxP,GAAA,GAAAlC,OACAG,GAAAuR,EAAAvR,GACAC,KAAAsR,EAAAtR,KACAK,SAAAiR,EAAAC,WAAA,GAAAvR,KACAG,IAAAmR,EAAArQ,SAAAd,IACAC,IAAAkR,EAAArQ,SAAAb,IACAE,QAAAgR,EAAArQ,SAAAuQ,kBAGA5P,SAAAG,QAAAuP,EAAAvR,GAAA+B,KAEAyN,EAAAnO,iBAEAqQ,KAAA,SAAAN,EAAAD,EAAAQ,GACAnC,EAAApN,WAAA,UAAAgP,EAAAjQ,OAAA,IAAAgQ,KA1CA,GAAA5C,GAAA,8CACAuC,EAAA,mDACAC,EAAA,mDAEAR,EAAA,2BACAE,EAAA,2BACAD,EAAA,2BACAE,EAAA,2BACAC,EAAA,0BAsCA,QACA3P,WAAAA,EACA6B,QAAA,WACA,MAAA,kBJjDAJ,UAAAd,EAAAiQ,MAAA,EAAA9Q,UAoEAqP,GAAA/B,UAAAyD,MAAA,WACAnQ,OAAAiB,SAAAC,UAAA3B,OAAAhB,KAAAc,QAAA8B,WACArB,OAAA2O,EAAA,QAAA,GACA1N","file":"nmap.min.js","sourcesContent":["/**\r\n * Created by dell on 13-01-2017.\r\n */\r\n'use strict';\r\n\r\nvar myCity = {\r\n    name: \"Chennai\",\r\n    location: {}  // determined using geocode at runtime\r\n};\r\n\r\nvar vModel, // ref to knockout view model\r\n    mapDiv;\r\n\r\n//  constants used to signal events between views\r\nvar ITEM_CLICKED = 100,\r\n    ITEM_UNCLICKED = 200,\r\n    ITEM_HIDDEN = 300,\r\n    ITEM_REVEALED = 400,\r\n    MARKER_CLICKED = 500,\r\n    MARKER_UNCLICKED = 600,\r\n    MARKER_HIDDEN = 700,\r\n    MARKER_REVEALED = 800,\r\n    RESTORE_ALL = 900,\r\n    FETCH_SUCCESS = 1,\r\n    FETCH_FAIL = 0;\r\n\r\nvar MAP_ZOOM_LEVEL = 14;\r\n\r\nvar MOBILE_MAXWIDTH = 450,\r\n    TAB_MAXWIDTH = 768,\r\n    PHONE_FORM = 10,\r\n    TAB_FORM = 20,\r\n    DESKTOP_FORM = 30;\r\n","/**\r\n * Created by Sankar on 05-01-2017.\r\n */\r\n'use strict';\r\n\r\nfunction Spot(data) {\r\n    this.id = data.id;\r\n    this.name = data.name;\r\n    this.position = new Position (data.lat, data.lng);\r\n    this.category = data.category;\r\n    this.address = data.address;\r\n}\r\n\r\nSpot.prototype.getName = function () {\r\n    return this.name;\r\n};\r\n\r\nSpot.prototype.getPosition = function () {\r\n    return this.position;\r\n};\r\n\r\nSpot.prototype.getID = function () {\r\n    return this.id;\r\n};\r\n\r\nSpot.prototype.getCategory = function () {\r\n    return this.category;\r\n};\r\n\r\nSpot.prototype.getAddress = function () {\r\n    return this.address;\r\n};\r\n\r\nfunction Position (lat, lng) {\r\n    this.lat = parseFloat(lat);\r\n    this.lng = parseFloat(lng);\r\n}\r\n\r\nPosition.prototype.getLat = function () {\r\n    return this.lat;\r\n};\r\n\r\nPosition.prototype.getLng = function () {\r\n    return this.lng;\r\n};\r\n\r\nvar spotsDb = {\r\n    spots: {},\r\n    addSpot:    function (id, spot) {\r\n        this.spots[id] = spot;\r\n    },\r\n\r\n    getSpot:    function (id) {\r\n        return this.spots[id];\r\n    },\r\n\r\n    getAllSpots: function () {\r\n        return this.spots;\r\n    }\r\n};","/**\r\n * Created by Sankar on 05-01-2017.\r\n */\r\n\r\n'use strict';\r\n\r\nfunction ListItem (id, name) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.isVisible = ko.observable(true);\r\n    this.clickStatus = ko.observable(false);\r\n}\r\n\r\nListItem.prototype.getName = function () {\r\n    return this.name;\r\n};\r\n\r\nListItem.prototype.getID = function () {\r\n    return this.id;\r\n};\r\n\r\nListItem.prototype.isClicked = function () {\r\n    return this.clickStatus();\r\n};\r\n\r\nListItem.prototype.setClicked = function (status) {\r\n    this.clickStatus(status);\r\n};\r\n\r\nListItem.prototype.setVisibility = function (status) {\r\n    this.isVisible(status);\r\n};\r\n","/**\r\n * Created by Sankar on 04-01-2017.\r\n */\r\n\r\n// map is rendered only after both map has been loaded async\r\n// *AND* DOM is ready (need DOM element to anchor the map).\r\n// Using underscore.js to wait for both events to complete\r\nvar drawMyMap = _.after(2, bakeMyMap);\r\n\r\nfunction bakeMyMap() {\r\n    fsquare.fetchSpots(myCity.location, function (status, err) {\r\n        if (status === FETCH_SUCCESS) {\r\n            Gmap.init(mapDiv, myCity.location, MAP_ZOOM_LEVEL, vModel);\r\n\r\n            _.each(spotsDb.getAllSpots(), function (spot, id) {\r\n                vModel.addSpot(id);\r\n                Gmap.addMarker(id);\r\n            });\r\n\r\n            Gmap.showAllMarkers();\r\n\r\n            vModel.notifySpotEvent(FETCH_SUCCESS, err);\r\n        }\r\n        else {\r\n            vModel.notifySpotEvent(FETCH_FAIL, err);\r\n        }\r\n    });\r\n}\r\n\r\nfunction launch() {\r\n    Gmap.geoCode(myCity.name, function (results, status) {\r\n        if (status === 'OK') {\r\n            myCity.location = {\r\n                lat: results[0].geometry.location.lat(),\r\n                lng: results[0].geometry.location.lng()\r\n            };\r\n            drawMyMap();\r\n\r\n        } else {\r\n            vModel.notifySpotEvent(FETCH_FAIL, 'Geocode was not successful for the following reason: ' + status);\r\n        }\r\n    });\r\n}\r\n\r\n// Called when Google maps api did not load/init successfully\r\n// script tag onerror() call.\r\nfunction launchError () {\r\n    // It is possible, DOM ready fn is not called yet.\r\n    // Note that vModel is a singleton.\r\n    if (!vModel)\r\n        vModel = ListView.getVmodel(myCity.name, fsquare.getName());\r\n    vModel.notifySpotEvent(FETCH_FAIL, \"Unable to load Google Maps.\");\r\n}\r\n\r\n// as per Google docs, called by Google libraries when the server auth fails\r\nfunction gm_authFailure() {\r\n    // It is possible, DOM ready fn is not called yet.\r\n    // Note that vModel is a singleton.\r\n    if (!vModel)\r\n        vModel = ListView.getVmodel(myCity.name, fsquare.getName());\r\n    vModel.notifySpotEvent(FETCH_FAIL, \"Google Maps server authentication failed\");\r\n}\r\n\r\n// basic type checking\r\nfunction getDeviceType () {\r\n    var wd = window.screen.width;\r\n    if (wd <= MOBILE_MAXWIDTH)\r\n        return PHONE_FORM;\r\n    else if (wd <= TAB_MAXWIDTH) {\r\n        return TAB_FORM;\r\n    }\r\n    else\r\n        return DESKTOP_FORM;\r\n}\r\n\r\n$(document).ready(function () {\r\n    vModel = ListView.getVmodel(myCity.name, fsquare.getName());\r\n    mapDiv = $(\"#map\")[0];\r\n    drawMyMap();\r\n});\r\n\r\n","/**\r\n * Created by Sankar on 05-01-2017.\r\n */\r\n'use strict';\r\n\r\nvar sample = (function () {\r\n\r\n    var places = [\r\n        {\r\n            \"id\": 0,\r\n            \"name\": \"Marina Beach\",\r\n            \"lat\": \"13.047662900808886\",\r\n            \"lng\": \"80.2806979251197\"\r\n        },\r\n\r\n        {\r\n            \"id\": 1,\r\n            \"name\": \"Anna Nagar Tower Park\",\r\n            \"lat\": \"13.086571414111077\",\r\n            \"lng\": \"80.21362675131819\"\r\n        },\r\n\r\n        {\r\n            \"id\": 2,\r\n            \"name\": \"Chitlapakam lake\",\r\n            \"lat\": \"12.933315880239075\",\r\n            \"lng\": \"80.13799263592671\"\r\n        },\r\n\r\n        {\r\n            \"id\": 3,\r\n            \"name\": \"Thiruvanmiyur Beach\",\r\n            \"lat\": \"12.980722245625548\",\r\n            \"lng\": \"80.26800155639648\"\r\n        },\r\n\r\n        {\r\n            \"id\": 4,\r\n            \"name\": \"Valluvar kottam\",\r\n            \"lat\": \"13.052757448973187\",\r\n            \"lng\": \"80.24267129698562\"\r\n        },\r\n\r\n        {\r\n            \"id\": 5,\r\n            \"name\": \"Besant Nagar Beach (Edward Elliot's Beach)\",\r\n            \"lat\": \"13.000506258411747\",\r\n            \"lng\": \"80.27084040530782\"\r\n        },\r\n\r\n        {\r\n            \"id\": 6,\r\n            \"name\": \"PVR - The Grand Mall Velachery\",\r\n            \"lat\": \"12.972083447836322\",\r\n            \"lng\": \"80.21869787142035\"\r\n        },\r\n\r\n        {\r\n            \"id\": 7,\r\n            \"name\": \"AGS Cinemas, T. Nagar\",\r\n            \"lat\": \"13.047377851967205\",\r\n            \"lng\": \"80.24509984915464\"\r\n        },\r\n\r\n        {\r\n            \"id\": 8,\r\n            \"name\": \"Sathyam Cinemas\",\r\n            \"lat\": \"13.055687857317821\",\r\n            \"lng\": \"80.25809632255645\"\r\n        },\r\n\r\n        {\r\n            \"id\": 9,\r\n            \"name\": \"Escape Cinemas\",\r\n            \"lat\": \"13.058725377915014\",\r\n            \"lng\": \"80.26413380533735\"\r\n        },\r\n\r\n        {\r\n            \"id\": 10,\r\n            \"name\": \"Forum Vijaya Mall\",\r\n            \"lat\": \"13.05029938745061\",\r\n            \"lng\": \"80.20947594272806\"\r\n        },\r\n\r\n        {\r\n            \"id\": 11,\r\n            \"name\": \"M A Chidambaram Stadium\",\r\n            \"lat\": \"13.062830126112663\",\r\n            \"lng\": \"80.27923923698869\"\r\n        },\r\n\r\n        {\r\n            \"id\": 12,\r\n            \"name\": \"Abirami Mega Mall\",\r\n            \"lat\": \"13.085838514881411\",\r\n            \"lng\": \"80.24798570645463\"\r\n        },\r\n\r\n        {\r\n            \"id\": 13,\r\n            \"name\": \"Music Academy\",\r\n            \"lat\": \"13.045824692206624\",\r\n            \"lng\": \"80.25964792592062\"\r\n        },\r\n\r\n        {\r\n            \"id\": 14,\r\n            \"name\": \"Kapaleeswarar Temple\",\r\n            \"lat\": \"13.0336342\",\r\n            \"lng\": \"80.2701988\"\r\n        },\r\n\r\n        {\r\n            \"id\": 15,\r\n            \"name\": \"Kalikambal Temple\",\r\n            \"lat\": \"13.09455\",\r\n            \"lng\": \"80.2891\"\r\n        }\r\n    ];\r\n\r\n    var populate = function () {\r\n        for (var j = 0; j < places.length; j++) {\r\n            spotsDb.addSpot(j, new Spot(places[j]));\r\n        }\r\n\r\n    };\r\n\r\n    return {\r\n        fetchSpots: populate\r\n    };\r\n})();\r\n","/**\r\n * Created by Sankar on 05-01-2017.\r\n */\r\n\r\nvar ListView = (function () {\r\n    'use strict';\r\n\r\n    var curClickSpot = null,\r\n        listVmodel = null,\r\n        SHOW_IN_LIST = true,\r\n        HIDE_IN_LIST = false,\r\n        HIGHLIGHT_ENTRY = true,\r\n        UNHIGHLIGHT_ENTRY = false;\r\n\r\n    var loadSuccessText = _.template('<h2><%= mycount %> spots found in <%= mycity %> using <%= myprovider %> APIs<hr></h2>');\r\n    var loadFailText = _.template('<h2>Unable to retrieve places data using <%= provider %>. <br><br>Reason: <%= reason %>.</h2>');\r\n    var filterResults = _.template('<h3><%= count %> spots match pattern \\\"<%= patstr %>\\\"</h3>');\r\n    var ViewModel = function (city, provider) {\r\n        var self = this;\r\n        // update the title with city name\r\n        self.cityName = ko.observable(city);\r\n        self.pgHeader = \"Explore \" + city;\r\n\r\n        // data provider - Foursquare etc.,\r\n        // providerFail suppresses filter box and displays\r\n        // error message. Reason is whatever supplied by the caller\r\n        self.providerName = provider;\r\n        self.providerFail = ko.observable(false);\r\n        self.failReason = \"\";\r\n\r\n        // the core view data structure that holds the view data -\r\n        // place names and whether it is filtered, clicked etc.,\r\n        self.spItemList = ko.observableArray();\r\n\r\n        // this field captures the user input for filtering the list\r\n        self.inputStr = ko.observable(\"\");\r\n\r\n        // this string holds pattern that was matched successfully\r\n        // storing it in a different var after matching so that the\r\n        // input box that is bound to inputStr gets cleare.\r\n        self.patString = \"\";\r\n\r\n        // showFiltResults is turned on when the user types a string on\r\n        // the text box or draws a polygon on the map\r\n        self.showFiltResults = ko.observable(false);\r\n        self.matches = ko.observable(0);\r\n        self.drawingMode = ko.observable(false);\r\n\r\n        // prompt user to filter the result only when there is more than 1 item\r\n        self.listCounter = ko.observable(0);\r\n\r\n        // show how many match user input\r\n        self.filtResult = ko.computed(function () {\r\n            if (self.showFiltResults()) {\r\n                return filterResults({\r\n                    count: self.matches(),\r\n                    patstr: self.patString\r\n                });\r\n            }\r\n            return \"\";\r\n        });\r\n\r\n        // turn on or off the list based on width\r\n        self.listWidth = ko.observable('0');\r\n        self.listShow = ko.observable(\"block\");\r\n\r\n        self.closeList = function () {\r\n            self.listShow(\"none\");\r\n        };\r\n\r\n        self.openList = function () {\r\n            self.listShow(\"block\");\r\n        };\r\n\r\n        // for small devices, start with the list closed.\r\n        self.dType = getDeviceType();\r\n        if ((self.dType === TAB_FORM) || (self.dType === PHONE_FORM))  {\r\n            self.closeList();\r\n        }\r\n\r\n        // text displayed when the load is not successful\r\n        self.loadFail = ko.computed(function () {\r\n            if (self.providerFail()) {\r\n                // for smaller devices, open the list\r\n                // so that the error message is displayed by default.\r\n                if ((self.dType === TAB_FORM) ||\r\n                    (self.dType === PHONE_FORM))  {\r\n                    self.openList();\r\n                }\r\n                return loadFailText({\r\n                    provider: self.providerName,\r\n                    reason: self.failReason\r\n                });\r\n            }\r\n        });\r\n\r\n        // display total no. of spots when you get some data from provider\r\n        self.loadSuccess = ko.computed(function () {\r\n            return loadSuccessText({\r\n                mycount: self.listCounter(),\r\n                mycity: self.cityName(),\r\n                myprovider: self.providerName\r\n            });\r\n        });\r\n\r\n        self.inpChange = function () {\r\n            self.showFiltResults(false);\r\n            self.filterList();\r\n        };\r\n\r\n        self.addSpot = function (id) {\r\n            var spItem,\r\n                index;\r\n\r\n            spItem = new ListItem(id, spotsDb.getSpot(id).getName());\r\n            // Let us insert into the list sorted\r\n            index = _.sortedIndex(self.spItemList(), spItem, 'name');\r\n            self.spItemList.splice(index, 0, spItem);\r\n            self.listCounter(self.listCounter() + 1);\r\n        };\r\n\r\n        // This function is bound to the html li item and is called\r\n        // whenever a list item is clicked.\r\n        self.listClickfn = function (spItem, event) {\r\n            var prevSpot = curClickSpot;\r\n\r\n            if (!spItem.isClicked()) {\r\n                // If some other item had been clicked, remove its\r\n                // highlight\r\n                if (prevSpot != null) {\r\n                    setDisplayParams(prevSpot, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                }\r\n\r\n                // Highlight the current item\r\n                setDisplayParams(spItem, SHOW_IN_LIST, HIGHLIGHT_ENTRY);\r\n                Gmap.notify(ITEM_CLICKED, spItem.getID());\r\n                curClickSpot = spItem;\r\n\r\n                // on phones, do not keep the list open when an item is clicked as\r\n                // the list overlays map almost full\r\n                if (self.dType == PHONE_FORM) {\r\n                    self.closeList();\r\n                }\r\n            }\r\n            else {\r\n                // we are unclicking a previous click on the same item\r\n                // stop highlighting and make sure to reset \"curClick\" items\r\n                setDisplayParams(spItem, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                Gmap.notify(ITEM_UNCLICKED, spItem.getID());\r\n                curClickSpot = null;\r\n            }\r\n        };\r\n\r\n        function findspItem(id) {\r\n            var len = self.spItemList().length,\r\n                spItem,\r\n                index;\r\n\r\n            for (index = 0; index < len; index++) {\r\n                spItem = self.spItemList()[index];\r\n                if (spItem.getID() == id) {\r\n                    return spItem;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function setDisplayParams(spItem, show, highlight) {\r\n            spItem.setVisibility(show);\r\n            spItem.setClicked(highlight);\r\n        }\r\n\r\n        // This function is called by map code when markers are clicked/hidden\r\n        // to keep the corresponding list entries in sync.\r\n        // not meant to be called within list view module.\r\n        self.notify = function (what, data) {\r\n            var len,\r\n                spItem,\r\n                index,\r\n                id = data;\r\n\r\n            switch (what) {\r\n                case MARKER_CLICKED:\r\n                    spItem = findspItem(id);\r\n                    if ((curClickSpot != spItem) && (curClickSpot != null)) {\r\n                        // clear out any previous clicks\r\n                        setDisplayParams(curClickSpot, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    }\r\n                    setDisplayParams(spItem, SHOW_IN_LIST, HIGHLIGHT_ENTRY);\r\n                    curClickSpot = spItem;\r\n                    break;\r\n\r\n                case MARKER_UNCLICKED:\r\n                    spItem = findspItem(id);\r\n                    setDisplayParams(spItem, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    curClickSpot = null;\r\n                    break;\r\n\r\n                case MARKER_HIDDEN:\r\n                    spItem = findspItem(id);\r\n                    setDisplayParams(spItem, HIDE_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    break;\r\n\r\n                case MARKER_REVEALED:\r\n                    spItem = findspItem(id);\r\n                    setDisplayParams(spItem, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    break;\r\n\r\n                case RESTORE_ALL:\r\n                    len = self.spItemList().length;\r\n                    for (index = 0; index < len; index++) {\r\n                        spItem = self.spItemList()[index];\r\n                        setDisplayParams(spItem, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    }\r\n                    self.inputStr(\"\");\r\n                    self.showFiltResults(false);\r\n                    self.drawingMode(false);\r\n                    break;\r\n\r\n            }\r\n        };\r\n\r\n        // called by app initialization logic once the spots are loaded or\r\n        // loading has failed\r\n        self.notifySpotEvent = function (what, data) {\r\n            switch (what) {\r\n                case FETCH_FAIL:\r\n                    self.failReason = data;\r\n                    self.providerFail(true);\r\n                    break;\r\n                case FETCH_SUCCESS:\r\n                    self.providerFail(false);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        // called by map code when the user filtered the markers\r\n        // drawing a polygon, this basically updates the result text displayed\r\n        self.updateFilterResult = function (matches, str) {\r\n            // on phones & tabs, open the list so that user can get to\r\n            // view the relevant markers and area\r\n            if ((self.dType === TAB_FORM)\r\n                || (self.dType === PHONE_FORM)) {\r\n                self.openList();\r\n            }\r\n\r\n            self.matches(matches);\r\n            self.patString = str;\r\n            self.inputStr(\"\");\r\n            self.showFiltResults(true);\r\n            self.drawingMode(true);\r\n        };\r\n\r\n        // called when the user types text in the filter box\r\n        self.filterList = function () {\r\n            var searchStr = self.inputStr(),\r\n                srchRegex,\r\n                count = 0;\r\n\r\n            srchRegex = new RegExp(searchStr, \"i\");\r\n            _.each(self.spItemList(), function (spItem) {\r\n                if (spItem.getName().search(srchRegex) == -1) {\r\n                    setDisplayParams(spItem, HIDE_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    Gmap.notify(ITEM_HIDDEN, spItem.getID());\r\n                }\r\n                else {\r\n                    setDisplayParams(spItem, SHOW_IN_LIST, UNHIGHLIGHT_ENTRY);\r\n                    Gmap.notify(ITEM_REVEALED, spItem.getID());\r\n                    count++;\r\n                }\r\n            });\r\n\r\n            // Note that we have already looped through all the items and turned on/off\r\n            // visibility even when the length is zero. This is to ensure a blank string\r\n            // restores the full list.\r\n            if (searchStr.length == 0) {\r\n                self.showFiltResults(false);\r\n            }\r\n            else {\r\n                self.matches(count);\r\n                self.patString = self.inputStr();\r\n                self.showFiltResults(true);\r\n            }\r\n        };\r\n    };\r\n\r\n    function getVmodel(city, provider) {\r\n        if (listVmodel != null)\r\n            return listVmodel;\r\n\r\n        listVmodel = new ViewModel(city, provider);\r\n        ko.applyBindings(listVmodel);\r\n\r\n        return listVmodel;\r\n    }\r\n\r\n    return {\r\n        getVmodel: getVmodel\r\n    };\r\n\r\n}());\r\n\r\n","/**\r\n * Created by Sankar on 04-01-2017.\r\n */\r\n\r\nvar Gmap = (function () {\r\n    'use strict';\r\n\r\n    var map,\r\n        markers = {},\r\n        bounds,\r\n        infoWindow,\r\n        drawingManager,\r\n        streetViewService,\r\n        polygon = null,\r\n        viewModel;\r\n\r\n    /* Map style sourced from: https://snazzymaps.com/style/61/blue-essence\r\n     *  Snazzy Maps is a repository of different styles for Google Maps aimed towards web designers and developers.\r\n     *  All styles are licensed under creative commons and are completely free to use.\r\n     */\r\n    var mapStyle = [\r\n        {\r\n            \"featureType\": \"landscape.natural\",\r\n            \"elementType\": \"geometry.fill\",\r\n            \"stylers\": [{\"visibility\": \"on\"}, {\"color\": \"#e0efef\"}]\r\n        },\r\n        {\r\n            \"featureType\": \"poi\",\r\n            \"elementType\": \"geometry.fill\",\r\n            \"stylers\": [{\"visibility\": \"on\"}, {\"hue\": \"#1900ff\"}, {\"color\": \"#c0e8e8\"}]\r\n        },\r\n        {\r\n            \"featureType\": \"road\",\r\n            \"elementType\": \"geometry\",\r\n            \"stylers\": [{\"lightness\": 100}, {\"visibility\": \"simplified\"}]\r\n        },\r\n        {\r\n            \"featureType\": \"road\",\r\n            \"elementType\": \"labels\",\r\n            \"stylers\": [{\"visibility\": \"off\"}]\r\n        },\r\n        {\r\n            \"featureType\": \"transit.line\",\r\n            \"elementType\": \"geometry\",\r\n            \"stylers\": [{\"visibility\": \"on\"}, {\"lightness\": 700}]\r\n        },\r\n        {\r\n            \"featureType\": \"water\",\r\n            \"elementType\": \"all\",\r\n            \"stylers\": [{\"color\": \"#7dcdcd\"}]\r\n        }];\r\n\r\n    function init(anchor, center, zlevel, vm) {\r\n\r\n        map = new google.maps.Map(anchor, {\r\n            center: center,\r\n            zoom: zlevel,\r\n            mapTypeControl: false,\r\n            scaleControl: true,\r\n            disableDoubleClickZoom: true,\r\n            draggable: true,\r\n            styles: mapStyle\r\n        });\r\n\r\n        markers = {};\r\n\r\n        bounds = new google.maps.LatLngBounds();\r\n\r\n        infoWindow = new google.maps.InfoWindow();\r\n        // Make sure the marker icon is no longer highlighted when the infowindow is closed.\r\n        infoWindow.addListener('closeclick', closeInfoWindow);\r\n\r\n        drawingManager = new google.maps.drawing.DrawingManager({\r\n            drawingControl: true,\r\n            drawingControlOptions: {\r\n                position: google.maps.ControlPosition.TOP_RIGHT,\r\n                drawingModes: ['polygon']\r\n            }\r\n        });\r\n        drawingManager.setMap(map);\r\n        // Add an event listener so that the polygon is captured,  call the\r\n        // processPolygon function. This will show the markers in the polygon,\r\n        // and hide any outside of it.\r\n        drawingManager.addListener('overlaycomplete', processPolygon);\r\n\r\n        // Using doubleclick to restore map when markers are\r\n        // hidden because user drawing a polygon\r\n        map.addListener('dblclick', restoreMap);\r\n\r\n        streetViewService = new google.maps.StreetViewService();\r\n\r\n        // When a marker is clicked on the map, we need to inform\r\n        // list view to highlight the corresponding list item. so\r\n        // we take in the view model object here.\r\n        viewModel = vm;\r\n\r\n        // when the browser resizes, keep the map centered.\r\n        google.maps.event.addDomListener(window, \"resize\", function() {\r\n            var center = bounds.getCenter();\r\n            google.maps.event.trigger(map, \"resize\");\r\n            map.setCenter(center);\r\n        });\r\n    }\r\n\r\n    function addMarker(id) {\r\n        var marker,\r\n            spot;\r\n\r\n        spot = spotsDb.getSpot(id);\r\n        marker = new google.maps.Marker({\r\n            position: spot.getPosition(),\r\n            animation: google.maps.Animation.DROP,\r\n            draggable: false,\r\n            id: id,\r\n            title: spot.getName()\r\n        });\r\n        marker.setIcon(getDefIcon());\r\n\r\n        // Extend the boundaries of the map for each marker\r\n        bounds.extend(marker.position);\r\n\r\n        // Push the marker to our hash of markers.\r\n        markers[id] = marker;\r\n\r\n        // Two event listeners - one for mouseover, one for mouseout,\r\n        // to change the colors back and forth.\r\n        marker.addListener('mouseover', function () {\r\n            this.setIcon(getHighlightIcon());\r\n        });\r\n        marker.addListener('mouseout', function () {\r\n            // Do not stop highlighting if this marker is clicked\r\n            // ie infowindow is open for this marker!\r\n            if (infoWindow.marker != this)\r\n                this.setIcon(getDefIcon());\r\n        });\r\n        marker.addListener('click', function () {\r\n            // the id aka key is stored in marker\r\n            showInfoWindow(this.id);\r\n        });\r\n    }\r\n\r\n    function showAllMarkers() {\r\n        var i = 1;\r\n\r\n        // Assuming that bounds have been extended at the time of\r\n        // adding the markers\r\n        map.fitBounds(bounds);\r\n        map.setCenter(bounds.getCenter());\r\n\r\n        _.each(markers, function (marker) {\r\n            window.setTimeout(function (mkr, where) {\r\n                return function () {\r\n                    mkr.setIcon(getDefIcon());\r\n                    mkr.setMap(where);\r\n                };\r\n            }(marker, map), (i++) * 50);\r\n        });\r\n    }\r\n\r\n    function showMarker(id) {\r\n        if (_.has(markers, id))\r\n            markers[id].setMap(map);\r\n    }\r\n\r\n    function hideMarker(id) {\r\n        if (_.has(markers, id))\r\n            markers[id].setMap(null);\r\n    }\r\n\r\n    function showInfoWindow(id) {\r\n        var marker;\r\n\r\n        if (!_.has(markers, id))\r\n            return;\r\n\r\n        marker = markers[id];\r\n        // Stop highlighting the previous click's marker in the map\r\n        // and inform the list view to do the same\r\n        if (infoWindow.marker != null) {\r\n            infoWindow.marker.setIcon(getDefIcon());\r\n            viewModel.notify(MARKER_UNCLICKED, infoWindow.marker.id);\r\n        }\r\n\r\n        marker.setIcon(getHighlightIcon());\r\n        infoWindow.marker = marker;\r\n        infoWindow.setContent(getContent(id));\r\n        infoWindow.open(map, marker);\r\n\r\n        // Now, ask the list view to highlight this item\r\n        viewModel.notify(MARKER_CLICKED, infoWindow.marker.id);\r\n    }\r\n\r\n    function closeInfoWindow() {\r\n        infoWindow.setContent(\"\");\r\n        infoWindow.close();\r\n\r\n        // The marker may be highligthed through list view click\r\n        // or direct click on marker. We inform the list view\r\n        // as the closure is triggered from the map\r\n        if (infoWindow.marker != null) {\r\n            infoWindow.marker.setIcon(getDefIcon());\r\n            viewModel.notify(MARKER_UNCLICKED, infoWindow.marker.id);\r\n            infoWindow.marker = null;\r\n        }\r\n\r\n        // recenter the map when infowindow is closed.\r\n        map.setCenter(bounds.getCenter());\r\n    }\r\n\r\n    function getContent(id) {\r\n        var spot = spotsDb.getSpot(id),\r\n            marker = markers[id],\r\n            radius = 100,\r\n            ctemplate = _.template('<h2><%= title %></h2>' +\r\n                '<h3><%= category %></h3><hr>' +\r\n                '<h4><%= address %></h4><hr>' +\r\n                '<h4>StreetView Image (Provider: Google)</h4>' +\r\n                '<div <%= panoId %></div>'),\r\n            contentStr = ctemplate({\r\n                title: spot.getName(),\r\n                category: spot.getCategory(),\r\n                address: spot.getAddress().toString(),\r\n                panoId: \"id='pano'\"\r\n            });\r\n\r\n\r\n        // Use streetview service to get the closest streetview image within\r\n        // 100 meters of the markers position\r\n        streetViewService.getPanoramaByLocation(marker.position, radius, function (data, status) {\r\n            // In case the status is OK, which means the pano was found, compute the\r\n            // position of the streetview image, then calculate the heading, then get a\r\n            // panorama from that and set the options\r\n            // console.log(data.copyright);\r\n            if (status == google.maps.StreetViewStatus.OK) {\r\n                var nearStreetViewLocation = data.location.latLng;\r\n                var heading = google.maps.geometry.spherical.computeHeading(\r\n                    nearStreetViewLocation, marker.position);\r\n                //infoWindow.setContent('<div>' + marker.title + '</div><div id=\"pano\"></div>');\r\n                var panoramaOptions = {\r\n                    position: nearStreetViewLocation,\r\n                    pov: {\r\n                        heading: heading,\r\n                        pitch: 0\r\n                    }\r\n                };\r\n                var panorama = new google.maps.StreetViewPanorama(\r\n                    document.getElementById('pano'), panoramaOptions);\r\n            } else {\r\n                contentStr = ctemplate({\r\n                    title: spot.getName(),\r\n                    category: spot.getCategory(),\r\n                    address: spot.getAddress().toString(),\r\n                    panoId: \"\"\r\n                });\r\n                infoWindow.setContent(contentStr +\r\n                    '<div>No StreetView image could be found for this location.</div>');\r\n            }\r\n        });\r\n\r\n        return contentStr;\r\n    }\r\n\r\n    function getDefIcon() {\r\n        var image = {\r\n            url: 'https://chart.googleapis.com/chart?chst=d_map_xpin_letter&chld=pin|$|\tcd7d7d|FFFFFF',\r\n            size: new google.maps.Size(21, 34),\r\n            origin: new google.maps.Point(0, 0),\r\n            anchor: new google.maps.Point(21, 34),\r\n            scaledSize: new google.maps.Size(21, 34)\r\n        };\r\n\r\n        return image;\r\n    }\r\n\r\n    function getHighlightIcon() {\r\n        var image = {\r\n            url: 'https://chart.googleapis.com/chart?chst=d_map_xpin_letter&chld=pin_star|$|7da5cd|FFFFFF',\r\n            size: new google.maps.Size(23, 39),\r\n            origin: new google.maps.Point(0, 0),\r\n            anchor: new google.maps.Point(23, 39),\r\n            scaledSize: new google.maps.Size(23, 39)\r\n        };\r\n\r\n        return image;\r\n    }\r\n\r\n    // This function should be called by view model code\r\n    // not meant to be called within Gmap module.\r\n    function notify(what, id) {\r\n        switch (what) {\r\n            case ITEM_CLICKED:\r\n                showInfoWindow(id);\r\n                break;\r\n            case ITEM_UNCLICKED:\r\n                closeInfoWindow();\r\n                break;\r\n            case ITEM_HIDDEN:\r\n                hideMarker(id);\r\n                break;\r\n            case ITEM_REVEALED:\r\n                showMarker(id);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function restoreMap() {\r\n        if (polygon)\r\n            polygon.setMap(null);\r\n        drawingManager.setDrawingMode(null);\r\n        closeInfoWindow();\r\n        viewModel.notify(RESTORE_ALL);\r\n        showAllMarkers();\r\n    }\r\n\r\n    function processPolygon(event) {\r\n        // First, check if there is an existing polygon.\r\n        // If there is, get rid of it\r\n        if (polygon) {\r\n            polygon.setMap(null);\r\n        }\r\n        // Switching the drawing mode to the HAND (i.e., no longer drawing).\r\n        drawingManager.setDrawingMode(null);\r\n        // Creating a new editable polygon from the overlay.\r\n        polygon = event.overlay;\r\n        polygon.setEditable(true);\r\n\r\n        // Searching within the polygon.\r\n        markInPolygon();\r\n        // Make sure the search is re-done if the poly is changed.\r\n        polygon.getPath().addListener('set_at', markInPolygon);\r\n        polygon.getPath().addListener('insert_at', markInPolygon);\r\n        polygon.getPath().addListener('remove_at', markInPolygon);\r\n    }\r\n\r\n    function markInPolygon() {\r\n        var matches = 0,\r\n            area = google.maps.geometry.spherical.computeArea(polygon.getPath());\r\n\r\n        _.each(markers, function (marker) {\r\n            if (google.maps.geometry.poly.containsLocation(marker.position, polygon)) {\r\n                marker.setMap(map);\r\n                viewModel.notify(MARKER_REVEALED, marker.id);\r\n                matches++;\r\n            }\r\n            else {\r\n                marker.setMap(null);\r\n                viewModel.notify(MARKER_HIDDEN, marker.id);\r\n            }\r\n        });\r\n\r\n        // Let us close any open infowindow!\r\n        closeInfoWindow();\r\n\r\n        // Inform the view to update the search result\r\n        area = (area / (1000000)).toFixed(2);\r\n        viewModel.updateFilterResult(matches, (\" for city area (approx) \" + area + \" sq.km\"));\r\n    }\r\n\r\n    function geoCode(city, callback) {\r\n        var geocoder = new google.maps.Geocoder();\r\n\r\n        geocoder.geocode({'address': city}, function (results, status) {\r\n            callback(results, status);\r\n        });\r\n    }\r\n\r\n    return {\r\n        init: init,\r\n        addMarker: addMarker,\r\n        showAllMarkers: showAllMarkers,\r\n        notify: notify,\r\n        geoCode: geoCode\r\n    };\r\n}());","/**\r\n * Created by Sankar on 08-01-2017.\r\n */\r\n\r\nvar fsquare = (function () {\r\n    'use strict';\r\n\r\n    var url = \"https://api.foursquare.com/v2/venues/search\",\r\n        client_id = \"LTP044CWAOZBWYQANA30G0RFMEUIPNKQQUTAKX1TJI5QVU2H\",\r\n        client_secret =\"3N2QDLDYIHRQBIZSR3UX4TLXWIHXJNPU43DEUC02C5SVRSTJ\",\r\n        // oauth_token = \"VRXHGIQJUIUYYI115MQD3ZHZFPFXB3V0LFOIO0RS43QSYVJ3\",\r\n        outdoor = \"4d4b7105d754a06377d81259\",\r\n        shopping = \"4d4b7105d754a06378d81259\",\r\n        food = \"4d4b7105d754a06374d81259\",\r\n        artEntertainment = \"4d4b7104d754a06370d81259\",\r\n        travel = \"4d4b7105d754a06379d81259\";\r\n\r\n        function fetchSpots (mycity, callback) {\r\n        url += '?' + $.param({\r\n                'll': mycity.lat + \",\" + mycity.lng,\r\n                'radius': 100000,\r\n                // \"4d4b7104d754a06370d81259,4bf58dd8d48988d181941735,4bf58dd8d48988d1e5931735,4d4b7105d754a06377d81259\"\r\n                'categoryId': (outdoor + \",\" + food + \",\" + shopping + \",\" + artEntertainment + \",\" + travel) ,\r\n                'limit': 16,\r\n                'intent': 'browse',\r\n                'client_id' : client_id,\r\n                'client_secret' : client_secret,\r\n                'v': \"20170107\"\r\n            });\r\n\r\n        $.getJSON(url)\r\n            .done(function (data, textStatus, jqXHR) {\r\n                var venues = data.response.venues;\r\n\r\n                _.each(venues, function (venue) {\r\n                    var spot = new Spot({\r\n                        \"id\": venue.id,\r\n                        \"name\": venue.name,\r\n                        \"category\": venue.categories[0].name,\r\n                        \"lat\": venue.location.lat,\r\n                        \"lng\": venue.location.lng,\r\n                        \"address\": venue.location.formattedAddress\r\n                    });\r\n\r\n                    spotsDb.addSpot(venue.id, spot);\r\n                });\r\n                callback(FETCH_SUCCESS);\r\n            })\r\n            .fail(function (jqXHR, textStatus, errorThrown) {\r\n                callback(FETCH_FAIL, \"Error: \" + jqXHR.status + \",\" + textStatus);\r\n            });\r\n    }\r\n\r\n    return {\r\n        fetchSpots: fetchSpots,\r\n        getName: function () {\r\n            return \"Foursquare\";\r\n        }\r\n    };\r\n})();"]}